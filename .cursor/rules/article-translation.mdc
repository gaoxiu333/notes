---
description:
globs:
alwaysApply: false
---
# 文章翻译规范

## 简介

本规则定义了项目中翻译文章的标准结构，以确保翻译内容的一致性、可读性和专业性。我们重视准确的翻译、清晰的排版和合适的引用格式。

## 基本结构

翻译文章应遵循以下结构：

1. 文章标题（使用一级标题 `#`）
2. 来源信息（使用引用格式 `>`）
3. 正文内容
4. 代码块和技术术语的处理
5. 必要时的译注说明

## 来源信息格式

来源信息应放在文章开头，标题之后，正文之前，使用以下格式：

```markdown
# [中文标题]

> 译自 [原文标题](原文链接)  
> 作者：[作者名]  
> 发布：YYYY/MM/DD
```

## 翻译规范

### 专业术语处理

1. 首次出现的专业术语应同时保留英文原文：
   ```markdown
   提示工程（Prompt Engineering）是一门新兴的技术学科
   ```

2. 常见的技术术语可直接使用中文译名：
   - API → 接口
   - function → 函数
   - component → 组件

3. 特定的技术名词保持原文：
   - React
   - TypeScript
   - Python

### 代码块处理

1. 保持原有的代码格式和缩进
2. 代码注释要翻译成中文
3. 保留原有的语言标记

```python
# 这是一个示例函数
def example_function():
    """
    函数的中文说明文档
    """
    return True
```

### 标点符号使用

1. 中文使用全角标点符号：，。！？""
2. 英文和代码中使用半角标点符号: , . ! ? ""
3. 中英文混排时遵循就近原则

### 排版要求

1. 段落之间使用一个空行分隔
2. 列表项使用统一的符号（有序或无序）
3. 保持原文的标题层级结构
4. 代码块前后各空一行

## 常见问题

* 不要省略原文中的任何内容
* 不要改变代码示例的结构
* 不要改变原文的排版格式
* 注意保持专业术语的一致性
* 避免使用机器翻译的生硬表达

## 翻译流程

1. 仔细阅读原文，理解核心内容
2. 确保技术术语的准确性
3. 保持原文的结构和格式
4. 调整语言表达使其符合中文习惯
5. 校对并确保没有遗漏内容
6. 检查格式和排版的一致性

## 示例参考

* [提示工程作为开发者学科](mdc:../AI/实际应用/提示词常见应用.md)

## 注意事项

* 翻译时要考虑中文读者的阅读习惯
* 保持专业性和可读性的平衡
* 必要时可以添加译注说明难以理解的概念
* 定期更新术语表以保持一致性
* 在保持原意的基础上适当调整表达方式
