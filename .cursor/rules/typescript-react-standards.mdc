---
description: 
globs: 
alwaysApply: false
---
# TypeScript React 规范

TypeScript 为 React 开发提供了静态类型检查，提高了代码质量和可维护性。本规则提供了在 React 项目中使用 TypeScript 的最佳实践和规范指南。

<rule>
name: typescript_react_standards
description: 在 React 项目中使用 TypeScript 的规范和最佳实践
filters:
  - type: file_extension
    pattern: "\\.(tsx|ts)$"
  - type: content
    pattern: "import\\s+[{\\s\\w,]*\\s*React"

actions:
  - type: suggest
    message: |
      ## React TypeScript 规范

      ### 组件定义
      1. 优先使用函数组件而非类组件
      2. 不推荐使用 `React.FC<Props>` 类型，而是直接定义 Props 接口

      ```typescript
      // 不推荐
      const Greeting: React.FC<GreetingProps> = ({ name }) => {
        return <h1>你好, {name}!</h1>;
      };

      // 推荐
      const Greeting = ({ name }: GreetingProps) => {
        return <h1>你好, {name}!</h1>;
      };
      ```

      ### Props 定义
      1. 使用接口(interface)而非类型别名(type)定义 Props
      2. 清晰标记可选属性与必选属性
      3. 属性名使用驼峰命名法
      4. 子组件使用 `children: React.ReactNode` 类型

      ```typescript
      interface ButtonProps {
        label: string;           // 必选
        primary?: boolean;       // 可选
        onClick: () => void;     // 必选函数
        children?: React.ReactNode; // 可选子元素
      }
      ```

      ### Hooks 类型
      1. 为 useState 提供明确的泛型类型
      2. 处理可能为 null/undefined 的状态时使用联合类型

      ```typescript
      // 推荐写法
      const [user, setUser] = useState<User | null>(null);
      ```

      ### 事件处理
      1. 使用正确的事件类型
         - React.MouseEvent<HTMLButtonElement>
         - React.ChangeEvent<HTMLInputElement>
         - React.FormEvent<HTMLFormElement>
      
      ### 最佳实践
      1. 启用严格模式 (tsconfig.json 中 "strict": true)
      2. 避免使用 any 类型，优先使用 unknown
      3. 使用类型守卫而非类型断言(as)
      4. 使用 ?? 而非 || 处理默认值
      5. 使用联合类型代替可选链

examples:
  - input: |
      // 不良实践示例
      const Component = (props: any) => {
        const [data, setData] = useState();
        const handleClick = (e) => {
          console.log(e.target.value);
        };
        return <div onClick={handleClick}>{data}</div>;
      };
    output: |
      // 改进后的代码
      interface ComponentProps {
        title?: string;
      }
      
      const Component = ({ title }: ComponentProps) => {
        const [data, setData] = useState<string | null>(null);
        
        const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {
          console.log(e.currentTarget);
        };
        
        return <div onClick={handleClick}>{data ?? "默认值"}</div>;
      };

metadata:
  priority: high
  version: 1.0
</rule>
